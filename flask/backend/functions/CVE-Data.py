import os
import json

def get_cve_content(cve_id):
    """
    Takes a CVE ID as a parameter, searches for the corresponding JSON file,
    and returns the content of the file as a dictionary.
    
    Parameters:
        cve_id (str): The CVE ID to search for (e.g., "CVE-2001-0001").
    
    Returns:
        dict: The content of the CVE JSON file, or None if the file is not found.
    """
    # Define the base directory where CVE files are stored
    base_dir = "/home/gradams/Documents/GitHub/Current-Git/CRAM/flask/backend/static/data/cve-dir/cves"
    
    # Validate the CVE ID format and extract year and subdirectory
    if not cve_id.startswith("CVE-"):
        raise ValueError("Invalid CVE ID format. It should start with 'CVE-'.")
    
    try:
        year = cve_id.split("-")[1]
        subdir = cve_id.split("-")[2][0] + "xxx"
    except IndexError:
        raise ValueError("Invalid CVE ID format. Please use the format CVE-YYYY-XXXX.")

    # Construct the path to the JSON file
    cve_file_path = os.path.join(base_dir, year, subdir, f"{cve_id}.json")
    
    # Check if the file exists and read its content
    if os.path.exists(cve_file_path):
        with open(cve_file_path, 'r') as file:
            return json.load(file)
    else:
        raise FileNotFoundError(f"No data found for {cve_id}. Ensure the CVE ID is correct.")

# Example usage:
try:
    content = get_cve_content("CVE-2001-0001")  # Replace with the desired CVE ID
    print(json.dumps(content, indent=2))
except (ValueError, FileNotFoundError) as e:
    print(e)
